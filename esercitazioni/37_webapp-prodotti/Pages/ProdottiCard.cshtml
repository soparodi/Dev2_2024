@page
@model ProdottiModel
@{
    ViewData["Title"] = "Prodotti";
}

<h1>@ViewData["Title"]</h1>

<div> 
    <form method="get"> @*il metodo GET invia i dati che stiamo passando via URL e sono visibili da URL (link), il metodo POST nasconde i dati*@
        <div class="row">
            <div class="col-5">
                <div class="form-group">
                    <label for="minPrezzo">Min Prezzo</label>
                    <input type="text" class="form-control" name="minPrezzo">
                </div>
            </div>
            <div class="col-5">
                <div class="form-group">
                    <label for="maxPrezzo">Max Prezzo</label>
                    <input type="text" class="form-control" name="maxPrezzo">
                </div>
            </div>

            <div class="col-2">
                <button type="submit" class="btn btn-primary">Filtra</button> @* nel Form il submit invia i dati all'OnGet del modello*@
            </div>
        </div>
    </form>
</div>
<div class="row text-center d-flex align item stretch">
    
    @foreach (var prodotto in Model.Prodotti) 
    {

        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card h-100 border-1 shadow-sm">
                <img src="@prodotto.Immagine" class="card-img-top pt-4 " alt="...">
                <div class="card-body">
                    <p class="card-text"> @prodotto.Nome</p>
                    <p class="card-text" style="font-weight: 600;">€@prodotto.Prezzo</p>
                    <p class="card-text">@prodotto.Dettaglio</p>
                </div>

                <div class="card-footer" id="tastoAcquista">
                    <p class="ms-2" style="font-weight: 300; font-size: small;">ORDINA </p>
                </div>


            </div>

        </div>
    }
</div>


<div>
    <form method="get">
        <input type="hidden" name="minPrezzo" value="@Request.Query["minPrezzo"]" />
        <input type="hidden" name="maxPrezzo" value="@Request.Query["maxPrezzo"]" />
        @for (int i = 1; i <= Model.numeroPagine; i++)
        {
            <button type="submit" class="btn btn-primary" name="pageIndex" value="@i">@i</button>
        }
    </form>
</div>

@* "Prodotti.cshtml"
    include codice HTML, quindi è una View. Per indicare quale modello utilizza viene
    incluso a inizio file la direttiva @model ProdottiModel.
    Dal momento che abbiamo a che fare con una lista di prodotti, si utilizza un ciclo
    in questo caso foreach. Per accedere a questa lista il framework ci mette a disposizione
    la proprietà Model, che contiene il modello "Prodotto.cshtml.cs" passato alla View.
    Attraverso Model.Prodotti possiamo accedere alla lista di prodotti e iterarla.
    e visualizzarla a piacimento attraverso il la sintassi "@prodotto.Nome" per esporre il nome
    come una stringa.

    asp-route-nome="nome" è un "..." che permette di passare una rotta virtuale alla pagina
    asp-page="./Dettaglio" che permette di generare sul momento "Dettaglio.cshtml"
    di quello specifico prodotto *@

@* Per utilizzare un immagine, il modello fornisce solo la STRINGA DEL PERCORSO (string prodotto.Immagine). quest'ultima deve essere inserita
    in un tag html per essere interpretata come percorso di un'immagine
    <img src=@prodotto.Immagine" width="100" height="100"/> *@